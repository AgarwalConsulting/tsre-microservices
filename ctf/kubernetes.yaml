# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: adservice
  labels:
      tags.datadoghq.com/env: "dash2024"
      tags.datadoghq.com/service: "adservice"
      tags.datadoghq.com/version: "1.0"
spec:

  selector:
    matchLabels:
      app: adservice
  template:
    metadata:
      labels:
        app: adservice
        tags.datadoghq.com/env: "dash2024"
        tags.datadoghq.com/service: "adservice"
        tags.datadoghq.com/version: "1.0"
        admission.datadoghq.com/enabled: "true"
      annotations:
        admission.datadoghq.com/java-lib.version: "v1.3.0"
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
        image: $ECR:adservice-v1.0
        ports:
        - containerPort: 9555
        env:
        - name: PORT
          value: "9555"
        - name: DISABLE_STATS
          value: "1"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        - name: DD_PROFILING_ENABLED
          value: "true"
        - name: DD_LOGS_INJECTION
          value: "false"
        - name: DD_TRACE_SAMPLE_RATE
          value: "1"
        - name: DD_INVENTORIES_CONFIGURATION_ENABLED
          value: "true"
        resources:
          requests:
            cpu: 200m
            memory: 180Mi
          limits:
            cpu: 300m
            memory: 300Mi
        # readinessProbe:
        #   initialDelaySeconds: 40
        #   periodSeconds: 15
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:9555"]
        # livenessProbe:
        #   initialDelaySeconds: 40
        #   periodSeconds: 15
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:9555"]
---
apiVersion: v1
kind: Service
metadata:
  name: adservice
spec:
  type: ClusterIP
  selector:
    app: adservice
  ports:
  - name: grpc
    port: 9555
    targetPort: 9555

---
---
apiVersion: v1
kind: Service
metadata:
  name: cartservice
spec:
  type: ClusterIP
  selector:
    app: cartservice
  ports:
  - name: grpc
    port: 7070
    targetPort: 7070

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cartservice
  labels:
      tags.datadoghq.com/env: "dash2024"
      tags.datadoghq.com/service: "cartservice"
      tags.datadoghq.com/version: "1.0"  
spec:
  selector:
    matchLabels:
      app: cartservice
  template:
    metadata:
      labels:
        app: cartservice
        tags.datadoghq.com/env: "dash2024"
        tags.datadoghq.com/service: "cartservice"
        tags.datadoghq.com/version: "0.5.0"
        admission.datadoghq.com/enabled: "true"
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          # readOnlyRootFilesystem: true
        image: $ECR:cartservice-v1.0
        ports:
        - containerPort: 7070
        env:
        - name: REDIS_ADDR
          value: "redis-cart:6379"
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: DD_TRACE_SAMPLE_RATE
          value: "1"
        - name: DD_RUNTIME_METRICS_ENABLED
          value: "true"
        resources:
          requests:
            cpu: 200m
            memory: 64Mi
          limits:
            cpu: 300m
            memory: 128Mi
        # readinessProbe:
        #   initialDelaySeconds: 15
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:7070", "-rpc-timeout=5s"]
        # livenessProbe:
        #   initialDelaySeconds: 15
        #   periodSeconds: 10
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:7070", "-rpc-timeout=5s"]
---
apiVersion: v1
kind: Service
metadata:
  name: cartservice
spec:
  type: ClusterIP
  selector:
    app: cartservice
  ports:
  - name: grpc
    port: 7070
    targetPort: 7070

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkoutservice
  labels:
      tags.datadoghq.com/env: "dash2024"
      tags.datadoghq.com/service: "checkoutservice"
      tags.datadoghq.com/version: "0.5.0"
spec:
  selector:
    matchLabels:
      app: checkoutservice
  template:
    metadata:
      labels:
        app: checkoutservice
        tags.datadoghq.com/env: "dash2024"
        tags.datadoghq.com/service: "checkoutservice"
        tags.datadoghq.com/version: "0.5.0"
        admission.datadoghq.com/enabled: "true"
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: server
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - all
            privileged: false
            # readOnlyRootFilesystem: true
          image: $ECR:checkoutservice-v1.0
          ports:
          - containerPort: 5050
          # readinessProbe:
          #   exec:
          #     command: ["/bin/grpc_health_probe", "-addr=:5050"]
          # livenessProbe:
          #   exec:
          #     command: ["/bin/grpc_health_probe", "-addr=:5050"]
          env:
          - name: PORT
            value: "5050"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: "productcatalogservice:3550"
          - name: SHIPPING_SERVICE_ADDR
            value: "shippingservice:50051"
          - name: PAYMENT_SERVICE_ADDR
            value: "paymentservice:50051"
          - name: EMAIL_SERVICE_ADDR
            value: "emailservice:5000"
          - name: CURRENCY_SERVICE_ADDR
            value: "currencyservice:7000"
          - name: CART_SERVICE_ADDR
            value: "cartservice:7070"
          - name: DISABLE_PROFILER
            value: "1"
          - name: DISABLE_STATS
            value: "1"
          - name: DISABLE_TRACING
            value: "1"
          - name: DD_PROFILING_ENABLED
            value: "true"
          - name: DD_LOGS_INJECTION
            value: "true"
          - name: DD_TRACE_SAMPLE_RATE
            value: "1"
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: checkoutservice
spec:
  type: ClusterIP
  selector:
    app: checkoutservice
  ports:
  - name: grpc
    port: 5050
    targetPort: 5050
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shippingservice
  labels:
    tags.datadoghq.com/env: "dsah2024"
    tags.datadoghq.com/service: "shippingservice"
    tags.datadoghq.com/version: "0.5.0"
spec:
  selector:
    matchLabels:
      app: shippingservice
  template:
    metadata:
      labels:
        app: shippingservice
        tags.datadoghq.com/env: "dsah2024"
        tags.datadoghq.com/service: "shippingservice"
        tags.datadoghq.com/version: "0.5.0"
        admission.datadoghq.com/enabled: "true"
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          # readOnlyRootFilesystem: true
        image: $ECR:shippingservice-v1.0
        ports:
        - containerPort: 50051
        env:
        - name: PORT
          value: "50051"
        - name: DISABLE_STATS
          value: "1"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        - name: DD_PROFILING_ENABLED
          value: "true"
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: DD_TRACE_SAMPLE_RATE
          value: "1"
        # readinessProbe:
        #   periodSeconds: 5
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:50051"]
        # livenessProbe:
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:50051"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: shippingservice
spec:
  type: ClusterIP
  selector:
    app: shippingservice
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: currencyservice
  labels:
      tags.datadoghq.com/env: "dash2024"
      tags.datadoghq.com/service: "currencyservice"
      tags.datadoghq.com/version: "0.5.0"
spec:
  selector:
    matchLabels:
      app: currencyservice
  template:
    metadata:
      labels:
        app: currencyservice
        tags.datadoghq.com/env: "dash2024"
        tags.datadoghq.com/service: "currencyservice"
        tags.datadoghq.com/version: "0.5.0"
        admission.datadoghq.com/enabled: "true"
      annotations:
        admission.datadoghq.com/js-lib.version: "v3.9.1"
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          # readOnlyRootFilesystem: true
        image: $ECR:currencyservice-v1.0
        ports:
        - name: grpc
          containerPort: 7000
        env:
        - name: PORT
          value: "7000"
        - name: DISABLE_PROFILER
          value: "1"
        - name: DISABLE_DEBUGGER
          value: "1"
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: DD_TRACE_SAMPLE_RATE
          value: "1"
        - name: DD_PROFILING_ENABLED
          value: "true"
        - name: DD_RUNTIME_METRICS_ENABLED
          value: "true"
        # readinessProbe:
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:7000"]
        # livenessProbe:
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:7000"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: currencyservice
spec:
  type: ClusterIP
  selector:
    app: currencyservice
  ports:
  - name: grpc
    port: 7000
    targetPort: 7000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: emailservice
  labels:
      tags.datadoghq.com/env: "dash2024"
      tags.datadoghq.com/service: "emailservice"
      tags.datadoghq.com/version: "0.5.0"
spec:
  selector:
    matchLabels:
      app: emailservice
  template:
    metadata:
      labels:
        app: emailservice
        tags.datadoghq.com/env: "dash2024"
        tags.datadoghq.com/service: "emailservice"
        tags.datadoghq.com/version: "0.5.0"
        admission.datadoghq.com/enabled: "true"
      annotations:
        admission.datadoghq.com/python-lib.version: "v1.6.3"
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      # securityContext:
      #   fsGroup: 1000
      #   runAsGroup: 1000
      #   runAsNonRoot: true
      #   runAsUser: 1000
      containers:
      - name: server
        # securityContext:
        #   allowPrivilegeEscalation: false
        #   capabilities:
        #     drop:
        #       - all
        #   privileged: false
        #   readOnlyRootFilesystem: true
        image: $ECR:emailservice-v1.0
        ports:
        - containerPort: 8080
        env:
        - name: PORT
          value: "8080"
        - name: DISABLE_PROFILER
          value: "1"
        - name: ENABLE_TRACING
          value: "0"
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: DD_TRACE_SAMPLE_RATE
          value: "1"
        - name: DD_RUNTIME_METRICS_ENABLED
          value: "true"
        - name: DD_PROFILING_ENABLED
          value: "true"
        # readinessProbe:
        #   periodSeconds: 5
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:8080"]
        # livenessProbe:
        #   periodSeconds: 5
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:8080"]
        resources:
          requests:
            cpu: 250m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
---
apiVersion: v1
kind: Service
metadata:
  name: emailservice
spec:
  type: ClusterIP
  selector:
    app: emailservice
  ports:
  - name: grpc
    port: 5000
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-cart
spec:
  selector:
    matchLabels:
      app: redis-cart
  template:
    metadata:
      labels:
        app: redis-cart
    spec:
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: redis
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: redis:alpine
        ports:
        - containerPort: 6379
        readinessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        livenessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        volumeMounts:
        - mountPath: /data
          name: redis-data
        resources:
          limits:
            memory: 256Mi
            cpu: 125m
          requests:
            cpu: 70m
            memory: 200Mi
      volumes:
      - name: redis-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: redis-cart
spec:
  type: ClusterIP
  selector:
    app: redis-cart
  ports:
  - name: tcp-redis
    port: 6379
    targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: recommendationservice
  labels:
      tags.datadoghq.com/env: "dash2024"
      tags.datadoghq.com/service: "recommendationservice"
      tags.datadoghq.com/version: "0.5.0"
spec:
  selector:
    matchLabels:
      app: recommendationservice
  template:
    metadata:
      labels:
        app: recommendationservice
        tags.datadoghq.com/env: "dash2024"
        tags.datadoghq.com/service: "recommendationservice"
        tags.datadoghq.com/version: "0.5.0"
        admission.datadoghq.com/enabled: "true"
      annotations:
        admission.datadoghq.com/python-lib.version: "v1.6.3"
        ad.datadoghq.com/server.logs: '[{"source": "python"}]'
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      # securityContext:
      #   fsGroup: 1000
      #   runAsGroup: 1000
      #   runAsNonRoot: true
      #   runAsUser: 1000
      containers:
      - name: server
        # securityContext:
        #   allowPrivilegeEscalation: false
        #   capabilities:
        #     drop:
        #       - all
        #   privileged: false
        #   readOnlyRootFilesystem: true
        image: $ECR:recommendationservice-v1.0
        ports:
        - containerPort: 8080
        # readinessProbe:
        #   periodSeconds: 5
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:8080"]
        # livenessProbe:
        #   periodSeconds: 5
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:8080"]
        env:
        - name: PORT
          value: "8080"
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: "productcatalogservice:3550"
        - name: DISABLE_PROFILER
          value: "1"
        - name: DISABLE_DEBUGGER
          value: "1"
        - name: ENABLE_TRACING
          value: "0"
        - name: DD_GRPC_SERVICE
          value: "recommendationservice"
        - name: DD_PROFILING_ENABLED
          value: "true"
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: DD_TRACE_SAMPLE_RATE
          value: "1"
        resources:
          requests:
            cpu: 100m
            memory: 220Mi
          limits:
            cpu: 200m
            memory: 450Mi
---
apiVersion: v1
kind: Service
metadata:
  name: recommendationservice
spec:
  type: ClusterIP
  selector:
    app: recommendationservice
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: productcatalogservice
  labels:
    tags.datadoghq.com/env: "dash2024"
    tags.datadoghq.com/service: "productcatalogservice"
    tags.datadoghq.com/version: "0.5.0"
spec:
  selector:
    matchLabels:
      app: productcatalogservice
  template:
    metadata:
      labels:
        app: productcatalogservice
        tags.datadoghq.com/env: "dash2024"
        tags.datadoghq.com/service: "productcatalogservice"
        tags.datadoghq.com/version: "0.5.0"
        admission.datadoghq.com/enabled: "true"
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        # securityContext:
          # allowPrivilegeEscalation: false
          # capabilities:
          #   drop:
          #     - all
          # privileged: false
          # readOnlyRootFilesystem: true
        image: $ECR:productcatalogservice-v1.0
        ports:
        - containerPort: 3550
        env:
        - name: PORT
          value: "3550"
        - name: DISABLE_STATS
          value: "1"
        - name: DISABLE_TRACING
          value: "1"
        - name: DISABLE_PROFILER
          value: "1"
        - name: DD_PROFILING_ENABLED
          value: "true"
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: DD_TRACE_SAMPLE_RATE
          value: "1"
        # readinessProbe:
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:3550"]
        # livenessProbe:
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:3550"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: productcatalogservice
spec:
  type: ClusterIP
  selector:
    app: productcatalogservice
  ports:
  - name: grpc
    port: 3550
    targetPort: 3550
---
apiVersion: apps/v1
kind: Deployment # what to create?
metadata:
  name: paymentdbservice
  labels:
    name: mysql
    tags.datadoghq.com/env: "dash2024"
    tags.datadoghq.com/service: "paymentdbservice"
    tags.datadoghq.com/version: "0.5.0"
spec: # specification for deployment resource
  replicas: 1 # how many replicas of pods we want to create
  selector:
    matchLabels:
      app: paymentdbservice
  template: # blueprint for pods
    metadata:
      name: paymentdbservice
      labels:
        app: paymentdbservice # service will look for this label
        name: paymentdbservice
        tags.datadoghq.com/env: "dash2024"
        tags.datadoghq.com/service: "paymentdbservice"
        tags.datadoghq.com/version: "0.5.0"
      annotations:
        ad.datadoghq.com/paymentdbservice.checks: |
          {
            "mysql": {
              "instances": [
                {
                  "dbm": "true",
                  "host": "paymentdbservice",
                  "port": 3306,
                  "username": "datadog",
                  "password": "bitsGoodBoy",
                  "reported_hostname": "mariadb"
                }
              ]
            }
          }
        ad.datadoghq.com/paymentdbservice.logs: '[{"source": "mysql", "service": "paymentdbservice"}]'
    spec: # specification for pods
      containers: # we can have one or more containers
      - name: paymentdbservice
        image: mariadb
        ports:
        - containerPort: 3306
        env:
        #- name: MARIADB_RANDOM_ROOT_PASSWORD
        - name: MARIADB_ALLOW_EMPTY_ROOT_PASSWORD
          value: "0" # if it is 1 and root_password is set, root_password takes precedance
        - name: MARIADB_ROOT_PASSWORD
          value: topsecret
        volumeMounts:
          - name: mysql-initdb
            mountPath: /docker-entrypoint-initdb.d
          - name: mariadb-config
            mountPath: /etc/mysql/conf.d/ # directory will be cleaned at the beginning
      volumes:
        - name: mysql-initdb
          configMap:
            name: mysql-initdb-config
        - name: mariadb-config
          configMap:
            name: mariadb-configmap
            defaultMode: 0644
            items:
            - key: mariadb.cnf
              path: plugin-configuration.cnf
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mariadb-configmap
data:
  mariadb.cnf: |
    [mariadb]
    performance_schema=ON
    max_digest_length=4096
    performance_schema_max_digest_length=4096
    performance-schema-instrument='stage/%=ON'
    performance-schema-consumer-events-stages-current=ON
    performance-schema-consumer-events-stages-history=ON
    performance-schema-consumer-events-stages-history-long=ON
    performance-schema-consumer-events-statements-current=ON
    performance-schema-consumer-events-waits-current=ON
    performance-schema-consumer-events-statements-history-long=ON
    performance-schema-consumer-events-statements-history=ON
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
data:
  init.sql: |
      CREATE USER datadog@'%' IDENTIFIED by 'bitsGoodBoy';
      ALTER USER datadog@'%' WITH MAX_USER_CONNECTIONS 5;
      GRANT SLAVE MONITOR ON *.* TO 'datadog'@'%' WITH MAX_USER_CONNECTIONS 5;
      GRANT PROCESS ON *.* TO datadog@'%';
      GRANT SELECT ON performance_schema.* TO 'datadog'@'%';
      CREATE SCHEMA IF NOT EXISTS datadog;
      GRANT EXECUTE ON datadog.* to 'datadog'@'%';
      GRANT CREATE TEMPORARY TABLES ON datadog.* TO 'datadog'@'%';
      DELIMITER $$
      CREATE PROCEDURE datadog.explain_statement(IN query TEXT)
      SQL SECURITY DEFINER
      BEGIN
      SET @explain := CONCAT('EXPLAIN FORMAT=json ', query);
      PREPARE stmt FROM @explain;
      EXECUTE stmt;
      DEALLOCATE PREPARE stmt;
      END $$
      DELIMITER ;
      DELIMITER $$
      CREATE PROCEDURE datadog.enable_events_statements_consumers()
      SQL SECURITY DEFINER
      BEGIN
      UPDATE performance_schema.setup_consumers SET enabled='YES' WHERE name LIKE 'events_statements_%';
      UPDATE performance_schema.setup_consumers SET enabled='YES' WHERE name = 'events_waits_current';
      END $$
      DELIMITER ;
      GRANT EXECUTE ON PROCEDURE datadog.enable_events_statements_consumers TO 'datadog'@'%';
      CREATE SCHEMA IF NOT EXISTS paymentdb;
      CREATE USER swagstore@'%' IDENTIFIED BY 'weLoveSwagAtDash2023';
      GRANT ALL PRIVILEGES on paymentdb.* to swagstore@'%';
      CREATE USER chris@'%' IDENTIFIED BY 'naughtydog';
      GRANT ALL PRIVILEGES on paymentdb.* to chris@'%';
      DELIMITER $$
      CREATE PROCEDURE paymentdb.explain_statement(IN query TEXT)
      SQL SECURITY DEFINER
      BEGIN
      SET @explain := CONCAT('EXPLAIN FORMAT=json ', query);
      PREPARE stmt FROM @explain;
      EXECUTE stmt;
      DEALLOCATE PREPARE stmt;
      END $$
      DELIMITER ;
      GRANT EXECUTE ON PROCEDURE paymentdb.explain_statement TO datadog@'%';
---
apiVersion: v1
kind: Service
metadata:
  name: paymentdbservice
spec:
  type: ClusterIP
  selector:
    app: paymentdbservice
  ports:
  - name: tcp-mariadb
    port: 3306
    targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loadgenerator
  labels:
      tags.datadoghq.com/env: "dash2024"
      tags.datadoghq.com/service: "loadgenerator"
      tags.datadoghq.com/version: "1.0"
spec:
  selector:
    matchLabels:
      app: loadgenerator
  replicas: 1
  template:
    metadata:
      labels:
        app: loadgenerator
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      initContainers:
      - command:
        - /bin/sh
        - -exc
        - |
          echo "Init container pinging frontend: ${FRONTEND_ADDR}..."
          sleep 30
          STATUSCODE=$(wget --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print $2}')
          if test $STATUSCODE -ne 200; then
              echo "Error: Could not reach frontend - Status code: ${STATUSCODE}"
              exit 1
          fi
        name: frontend-check
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: busybox:latest
        env:
        - name: FRONTEND_ADDR
          value: "frontend:80"
      containers:
      - name: main
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          readOnlyRootFilesystem: true
        image: loadgenerator
        env:
        - name: FRONTEND_ADDR
          value: "frontend:80"
        - name: USERS
          value: "10"
        resources:
          requests:
            cpu: 300m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    tags.datadoghq.com/env: "dash2024"
    tags.datadoghq.com/service: "frontend"
    tags.datadoghq.com/version: "1.2"
spec:
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        tags.datadoghq.com/env: "dash2024"
        tags.datadoghq.com/service: "frontend"
        tags.datadoghq.com/version: "1.2"
        admission.datadoghq.com/enabled: "true"
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: server
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - all
            privileged: false
            # readOnlyRootFilesystem: true
          image: $ECR:frontend-v1.0
          ports:
          - containerPort: 8080
          readinessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: "/_healthz"
              port: 8080
              httpHeaders:
              - name: "Cookie"
                value: "shop_session-id=x-readiness-probe"
          livenessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: "/_healthz"
              port: 8080
              httpHeaders:
              - name: "Cookie"
                value: "shop_session-id=x-liveness-probe"
          env:
          - name: PORT
            value: "8080"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: "productcatalogservice:3550"
          - name: CURRENCY_SERVICE_ADDR
            value: "currencyservice:7000"
          - name: CART_SERVICE_ADDR
            value: "cartservice:7070"
          - name: RECOMMENDATION_SERVICE_ADDR
            value: "recommendationservice:8080"
          - name: SHIPPING_SERVICE_ADDR
            value: "shippingservice:50051"
          - name: CHECKOUT_SERVICE_ADDR
            value: "checkoutservice:5050"
          - name: AD_SERVICE_ADDR
            value: "adservice:9555"
          # # ENV_PLATFORM: One of: local, gcp, aws, azure, onprem, alibaba
          # # When not set, defaults to "local" unless running in GKE, otherwies auto-sets to gcp 
          # - name: ENV_PLATFORM 
          #   value: "aws"
          - name: ENABLE_TRACING
            value: "0"
          - name: ENABLE_PROFILER
            value: "0"
          # - name: CYMBAL_BRANDING
          #   value: "true"
          - name: DD_PROFILING_ENABLED
            value: "true"
          - name: DD_LOGS_INJECTION
            value: "true"
          - name: DD_TRACE_SAMPLE_RATE
            value: "1"
          - name: DD_APPSEC_ENABLED
            value: "true"
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  type: ClusterIP
  selector:
    app: frontend
  ports:
  - name: http
    port: 80
    targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-lb
spec:
  type: LoadBalancer
  selector:
    app: frontend
  ports:
  - name: http
    port: 80
    targetPort: 8080

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: paymentservice
  labels:
      tags.datadoghq.com/env: "dash2024"
      tags.datadoghq.com/service: "paymentservice"
      tags.datadoghq.com/version: "0.5.0"
spec:
  selector:
    matchLabels:
      app: paymentservice
  template:
    metadata:
      labels:
        app: paymentservice
        tags.datadoghq.com/env: "dash2024"
        tags.datadoghq.com/service: "paymentservice"
        tags.datadoghq.com/version: "0.5.0"
        admission.datadoghq.com/enabled: "true"
      annotations:
        admission.datadoghq.com/java-lib.version: "v1.3.0"
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - all
          privileged: false
          # readOnlyRootFilesystem: true
        image: $ECR:paymentservice-0.6.1
        ports:
        - containerPort: 50051
        env:
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:mariadb://paymentdbservice:3306/paymentdb?useUnicode=true&characterEncoding=utf8&useSSL=false"
        - name: SPRING_DATASOURCE_USERNAME
          value: swagstore
        - name: SPRING_DATASOURCE_PASSWORD 
          value: weLoveSwagAtDash2023
        - name: SPRING_JPA_HIBERNATE_DDL_AUTO
          value: create
        - name: SERVER_PORT
          value: "8080"
        - name: PORT
          value: "50051"
        - name: DISABLE_PROFILER
          value: "1"
        - name: DISABLE_DEBUGGER
          value: "1"
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: DD_TRACE_SAMPLE_RATE
          value: "1"
        - name: DD_PROFILING_ENABLED
          value: "true"
        - name: DD_RUNTIME_METRICS_ENABLED
          value: "true"
        - name: CTHULHU_URL
          value: "cthulhu"
        # readinessProbe:
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:50051"]
        # livenessProbe:
        #   exec:
        #     command: ["/bin/grpc_health_probe", "-addr=:50051"]
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 512Mi
---
apiVersion: v1
kind: Service
metadata:
  name: paymentservice
spec:
  type: ClusterIP
  selector:
    app: paymentservice
  ports:
  - name: grpc
    port: 50051
    targetPort: 9090
---
apiVersion: v1
kind: Service
metadata:
  name: paymentservice-lb
spec:
  type: LoadBalancer
  selector:
    app: paymentservice
  ports:
  - name: http
    port: 50051
    targetPort: 50051